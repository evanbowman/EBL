;;;
;;; Some common list algorithms
;;;


(namespace std
  (defn dolist (f lat)
    "(dolist proc lat) -> null, apply f to lat for the side-effects"
    (if (null? lat)
        null
        (begin
          (f (car lat))
          (recur f (cdr lat)))))

  (def reverse
       (let ((reverse-helper
              (lambda (lat result)
                (if (null? lat)
                    result
                    (recur (cdr lat) (cons (car lat) result))))))
         (lambda (lat)
           "(reverse lat) -> reversed lat"
           (reverse-helper lat null))))

  (def flatten
       (let ((impl (lambda (in out)
                     (if (pair? in)
                         (let ((new-out (impl (car in) out)))
                           (if (null? (cdr in))
                               new-out
                               (recur (cdr in) new-out)))
                         (cons in out)))))
         (lambda (input)
           "(flatten input) -> result list S.T. sublists are expanded into input"
           (reverse (impl input null)))))

  (def map
       (let ((impl
              (lambda (f lat result)
                (if (null? lat)
                    (reverse result)
                    (recur f (cdr lat) (cons (f (car lat)) result))))))
         (lambda (f lat)
           "(map f lat) -> list, from applying f to each element of input lat"
           (impl f lat null))))

  (def filter
       (let ((impl
              (lambda (pred lat result)
                (if (null? lat)
                    result
                    (if (pred (car lat))
                        (recur pred (cdr lat) (cons (car lat) result))
                        (recur pred (cdr lat) result))))))
         (lambda (pred lat)
           "(filter pred lat) -> list of all elements of lat that satisfy pred"
           (reverse (impl pred lat null)))))

  (def reduce
       (let ((impl
              (lambda (f lat result)
                (if (null? lat)
                    result
                    (recur f (cdr lat) (f result (car lat)))))))
         (lambda (f lat)
           "(reduce f lat) -> reduction of lat by left fold with f"
           (impl f (cdr lat) (car lat)))))

  (defn zip (f lat1 lat2)
    "(zip f list1 list2) -> element-wise combination of list1 and list2"
    (if (null? lat1)
        null
        (cons
         (f (car lat1) (car lat2))
         (zip f (cdr lat1) (cdr lat2)))))

  (defn every (pred lat)
    "(every pred lat) -> true if pred is true for all elements, otherwise false"
    (if (null? lat)
        true
        (if (not (pred (car lat)))
            false
            (recur pred (cdr lat)))))

  (defn assoc (lat key)
    "(assoc key lat) -> element associated with key in lat, otherwise false"
    (some (lambda (elem)
            (equal? (car elem) key))
          lat))

  (namespace detail
    (defn append-impl (from to)
      (if (null? from)
          to
          (recur (cdr from) (cons (car from) to)))))

  (defn append (l1 l2)
    "(append l1 l2) -> l2 appended to l1"
    (detail::append-impl (reverse l1) l2))

  (defn remove (lat q pred)
    ((lambda (result lat)
       (cond
        ((null? lat) result)
        ((pred (car lat) q) (detail::append-impl result (cdr lat)))
        (true (recur (cons (car lat) result) (cdr lat)))))
     null lat))

  (defn generate (n proc)
    ((lambda (i result)
       (if (equal? i 0)
           (cons (proc 0) result)
           (recur (decr i) (cons (proc i) result))))
     (decr n) null))

  (defn cddr (lat) (cdr (cdr lat)))

  (def bisect
       (let ((impl
              (lambda (tortoise hare acc)
                ;; The tortoise moves at a rate of 1, and the hare moves at a
                ;; rate of 2 (skips every other pair). As the tortoise moves, it
                ;; accumulates cons'es. When the hare finishes, the tortoise
                ;; will have accumulated exactly the first half of the list, and
                ;; its 'iterator' points to the second half of the list.
                (cond
                 ((null? hare)
                  (cons (reverse acc) tortoise))
                 ((null? (cdr hare))
                  (cons (reverse acc) tortoise))
                 (true
                  (recur (cdr  tortoise)
                         (cddr hare)
                         (cons (car tortoise) acc)))))))
         (lambda (lat)
           (impl lat lat null))))

  (def mergesort
       (let ((merge
              (lambda (a b)
                (cond
                 ((null? a) b)
                 ((null? b) a)
                 ((< (car a) (car b))
                  (cons (car a) (merge (cdr a) b)))
                 (true
                  (cons (car b) (merge a (cdr b))))))))
         (lambda (lat)
           "(mergesort lat) -> sorted lat"
           (if (null? (cdr lat))
               lat
               (let ((parted (bisect lat)))
                 (merge (mergesort (car parted))
                        (mergesort (cdr parted))))))))

  (def sort mergesort))
