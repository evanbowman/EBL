(require "ebl/stdlib.ebl")

(namespace json
  (namespace parser-impl
    (def-mut parse-value null)

    (defn find-char (input index)
      "(find-char input index) -> position of next non-whitespace char"
      (def current (get input index))
      (cond
       ((equal? current std::chars::tab)
        (recur input (incr index)))
       ((equal? current std::chars::space)
        (recur input (incr index)))
       ((equal? current std::chars::line-feed)
        (recur input (incr index)))
       (true
        index)))

    (defn parse-string (input start)
      "(parse-string input start) -> (string . chars-consumed)"
      ((lambda (index)
         (if (equal? \" (get input index))
             (cons (std::substr input start index) (incr index))
             (recur (incr index))))
       start))

    (defn char-numeric? (char)
      (let ((ival (integer char)))
        (cond
         ((< ival 48) false)
         ((> ival 57) false)
         (true true))))

    (defn parse-number (input start)
      "(parse-number input start) -> (number . chars-consumed)"
      ((lambda (index)
         (if (not (char-numeric? (get input index)))
             (cons (float (std::substr input start index)) index)
             (recur (incr index))))
       start))

    (defn parse-array (input start)
      "(parse-array input start) -> (list . chars-consumed)"
      ((lambda (index result)
         (if (equal? (get input index) std::chars::r-brace)
             (cons (std::reverse result) (incr index))
             (let ((parsed (parse-value input index))
                   (next-index (find-char input (cdr parsed)))
                   (next-char (get input next-index)))
               (def head (cons (car parsed) result))
               (cond
                ((equal? next-char \,)
                 (recur (find-char input (incr next-index)) head))
                ((equal? next-char std::chars::r-brace)
                 (cons (std::reverse head) (incr next-index)))
                (true
                 (error (string "invalid char: " next-char)))))))
       start null))

    (defn parse-map (input start)
      "(parse-map input start) -> (assoc-list . chars-consumed)"
      ((lambda (index result)
         (if (equal? (get input index) \})
             (cons result (incr index))
             (let ((parsed-key (parse-value input index))
                   (next-index (find-char input (cdr parsed-key)))
                   (next-char (get input next-index)))
               (if (not (equal? next-char \:))
                   (error (string "expected : after tag, found " next-char " " next-index)))
               (let ((parsed-value (parse-value input (find-char input (incr next-index))))
                     (next-index (find-char input (cdr parsed-value)))
                     (next-char (get input next-index)))
                 (def head (cons (cons (symbol (car parsed-key))
                                       (car parsed-value)) result))
                 (cond
                  ((equal? next-char \,)
                   (recur (find-char input (incr next-index)) head))
                  ((equal? next-char \})
                   (cons head (incr next-index)))
                  (true
                   (error (string "invalid char: " next-char))))))))
       start null))

    (defn parse-constant (constant input start)
      (def len (length constant))
      (if (equal? constant (std::substr input start (+ start len)))
          (cons constant len)
          (error "...")))

    (set parse-value
         (lambda (input start)
           (def current (get input start))
           (cond
            ((equal? current \") (parse-string input (incr start)))
            ((equal? current std::chars::l-brace) (parse-array input (find-char input (incr start))))
            ((equal? current \{) (parse-map input (find-char input (incr start))))
            ((char-numeric? current) (parse-number input start))
            ((equal? current \n) (parse-constant "null" input start))
            ((equal? current \t) (parse-constant "true" input start))
            ((equal? current \f) (parse-constant "false" input start))
            (true (error (string "invalid char " current)))))))

  (defn parse (input)
    (car (parser-impl::parse-value input (parser-impl::find-char input 0))))

  (defn get (obj key)
    (let ((result (std::assoc obj key)))
      (if result
          (cdr result)
          false)))

  (defn object? (val)
    (cond
     ((not (pair? val)) false)
     ((not (pair? (car val))) false)
     ((symbol? (car (car val))) true)
     (true false)))

  (defn array? (val)
    (if (not (pair? val))
        false
        (not (object? val)))))
